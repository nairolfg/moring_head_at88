
movinghead_88.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000340  000003d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000340  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800100  00800100  000003d4  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000003d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000b37  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000028  00000000  00000000  00000b66  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000024d  00000000  00000000  00000b8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000000d0  00000000  00000000  00000ddb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000136  00000000  00000000  00000eab  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000bc  00000000  00000000  00000fe4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000176  00000000  00000000  000010a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000000dc  00000000  00000000  00001216  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	7e c0       	rjmp	.+252    	; 0x122 <__vector_18>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	21 e0       	ldi	r18, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	af 30       	cpi	r26, 0x0F	; 15
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	16 d1       	rcall	.+556    	; 0x27e <main>
  52:	74 c1       	rjmp	.+744    	; 0x33c <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <datadirec_init>:
//ende Globale Variablen//


void datadirec_init(void){

    DDRB |=(1<<PB0)|(1<<PB1)|(1<<PB2);		// Ausgänge festlegen
  56:	84 b1       	in	r24, 0x04	; 4
  58:	87 60       	ori	r24, 0x07	; 7
  5a:	84 b9       	out	0x04, r24	; 4
	DDRC =0x80;
  5c:	80 e8       	ldi	r24, 0x80	; 128
  5e:	87 b9       	out	0x07, r24	; 7
	DDRD |=(1<<PD2)|(1<<PD3)|(1<<PD5)|(1<<PD6);		// Ausgänge festlegen
  60:	8a b1       	in	r24, 0x0a	; 10
  62:	8c 66       	ori	r24, 0x6C	; 108
  64:	8a b9       	out	0x0a, r24	; 10
	
	//PORTC |= (1<<PC0)|(1<<PC1)|(1<<PC2)|(1<<PC3)|(1<<PC4)|(1<<PC5);	
	PORTC = 0b00111111;
  66:	8f e3       	ldi	r24, 0x3F	; 63
  68:	88 b9       	out	0x08, r24	; 8
	//PORTC = 0b00000000;
	//PORTD |= (1<<PD4)|(1<<PD7);
	PORTD = 0b10010000;
  6a:	80 e9       	ldi	r24, 0x90	; 144
  6c:	8b b9       	out	0x0b, r24	; 11
  6e:	08 95       	ret

00000070 <timer_init>:

void timer_init(void){								// RGB PWM
	
	// PWM-Initialisierung für Red u. Green
	
	TCCR0A |= (1<<COM0A1)|(1<<COM0B1)|(1<<WGM00)|(1<<WGM01);		//	Clear on compare match, set on top, Fast PWM TOP = 0xFF
  70:	84 b5       	in	r24, 0x24	; 36
  72:	83 6a       	ori	r24, 0xA3	; 163
  74:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS00);											// Fast PWM, no prescaler (ggf. noch ändern)
  76:	85 b5       	in	r24, 0x25	; 37
  78:	81 60       	ori	r24, 0x01	; 1
  7a:	85 bd       	out	0x25, r24	; 37

	// PWM-Initialisierung für Blue

	TCCR2A |= (1<<COM2B1)|(1<<WGM20)|(1<<WGM21);					//	Clear on compare match, set on TOP, Fast PWM TOP = 0xFF
  7c:	e0 eb       	ldi	r30, 0xB0	; 176
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	80 81       	ld	r24, Z
  82:	83 62       	ori	r24, 0x23	; 35
  84:	80 83       	st	Z, r24
	TCCR2B |= (1<<CS20);											// Fast PWM, no prescaler (ggf. noch änderrn)
  86:	e1 eb       	ldi	r30, 0xB1	; 177
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	81 60       	ori	r24, 0x01	; 1
  8e:	80 83       	st	Z, r24
  90:	08 95       	ret

00000092 <servo_init>:
}

void servo_init(void){
	TCCR1A |= (1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);					// Clear ORC1A/B on compare match, Set at TOP
  92:	e0 e8       	ldi	r30, 0x80	; 128
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	80 81       	ld	r24, Z
  98:	82 6a       	ori	r24, 0xA2	; 162
  9a:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12)|(1<<WGM13)|(1<<CS11); 						// Fast PWM TOP = ICR1, Prescaler 8
  9c:	e1 e8       	ldi	r30, 0x81	; 129
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	8a 61       	ori	r24, 0x1A	; 26
  a4:	80 83       	st	Z, r24
	//ICR1 = 65536;													// 1ms = 8000 Takte
	ICR1H = 0x4E;
  a6:	8e e4       	ldi	r24, 0x4E	; 78
  a8:	80 93 87 00 	sts	0x0087, r24
	ICR1L = 0x20;
  ac:	80 e2       	ldi	r24, 0x20	; 32
  ae:	80 93 86 00 	sts	0x0086, r24
  b2:	08 95       	ret

000000b4 <UART_init>:
}


void UART_init (void){

	UBRR0H = 0;
  b4:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 1;														// Baudrate = 250kbit/s
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	80 93 c4 00 	sts	0x00C4, r24
	//UCSR0A=0;
	UCSR0B=(1<<RXCIE0)|(1<<RXEN0);										// receive interrupt enable, receive enable
  be:	80 e9       	ldi	r24, 0x90	; 144
  c0:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C=(1<<USBS0)|(1<<UCSZ01)|(1<<UCSZ00);
  c4:	8e e0       	ldi	r24, 0x0E	; 14
  c6:	80 93 c2 00 	sts	0x00C2, r24
  ca:	08 95       	ret

000000cc <anfangszustand>:
}


void anfangszustand(void){

	OCR0A = 0;			// Red
  cc:	17 bc       	out	0x27, r1	; 39
	OCR0B = 0;			// Green
  ce:	18 bc       	out	0x28, r1	; 40
	OCR2B = 0;			// Blue
  d0:	10 92 b4 00 	sts	0x00B4, r1
	
	pan = 1000;		// Servo 1
  d4:	88 ee       	ldi	r24, 0xE8	; 232
  d6:	93 e0       	ldi	r25, 0x03	; 3
  d8:	90 93 05 01 	sts	0x0105, r25
  dc:	80 93 04 01 	sts	0x0104, r24
	tilt = 1000;		// Servo 2
  e0:	90 93 09 01 	sts	0x0109, r25
  e4:	80 93 08 01 	sts	0x0108, r24
  e8:	08 95       	ret

000000ea <get_address>:

int get_address(void){

	uint8_t address;

	address = (PINC & 0x3F)|((PIND & 0x10)<<2)|(PIND & 0x80);
  ea:	26 b1       	in	r18, 0x06	; 6
  ec:	89 b1       	in	r24, 0x09	; 9
  ee:	99 b1       	in	r25, 0x09	; 9
  f0:	90 78       	andi	r25, 0x80	; 128
  f2:	2f 73       	andi	r18, 0x3F	; 63
  f4:	92 2b       	or	r25, r18
  f6:	80 71       	andi	r24, 0x10	; 16
  f8:	88 0f       	add	r24, r24
  fa:	88 0f       	add	r24, r24
  fc:	89 2b       	or	r24, r25
	
	address = ~(address);	
  fe:	80 95       	com	r24

	//address = 1;

	kanal_servo1 = address;
 100:	80 93 0c 01 	sts	0x010C, r24
	kanal_servo2 = address + 1;
 104:	98 2f       	mov	r25, r24
 106:	9f 5f       	subi	r25, 0xFF	; 255
 108:	90 93 07 01 	sts	0x0107, r25
	kanal_red = address + 2;
 10c:	9f 5f       	subi	r25, 0xFF	; 255
 10e:	90 93 06 01 	sts	0x0106, r25
	kanal_green = address + 3;
 112:	9f 5f       	subi	r25, 0xFF	; 255
 114:	90 93 0d 01 	sts	0x010D, r25
	kanal_blue = address + 4;	
 118:	9f 5f       	subi	r25, 0xFF	; 255
 11a:	90 93 0e 01 	sts	0x010E, r25

	return address;
}
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	08 95       	ret

00000122 <__vector_18>:




ISR (USART_RX_vect){
 122:	1f 92       	push	r1
 124:	0f 92       	push	r0
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	0f 92       	push	r0
 12a:	11 24       	eor	r1, r1
 12c:	2f 93       	push	r18
 12e:	3f 93       	push	r19
 130:	4f 93       	push	r20
 132:	5f 93       	push	r21
 134:	8f 93       	push	r24
 136:	9f 93       	push	r25
	
	cli();								// deaktivieren der Interrupts
 138:	f8 94       	cli
	static uint16_t DmxCount;			// Variable für momentanen Kanal
	uint8_t USARTstate = UCSR0A;		// Variable für Status des UCSRA
 13a:	90 91 c0 00 	lds	r25, 0x00C0
	uint32_t DmxByte = UDR0;			// einlesen des wertes aus dem UDR
 13e:	40 91 c6 00 	lds	r20, 0x00C6
	uint8_t DmxState = gDmxState;		// DMX-Status (IDLE->0,BREAK->1,
 142:	80 91 0a 01 	lds	r24, 0x010A
										// STARTBYTE->2,STARTADRESSE->3)

	PORTB &= ~(1<<PB0);
 146:	28 98       	cbi	0x05, 0	; 5

	if(USARTstate&(1<<4)){				// schaut nach FrameError
 148:	94 ff       	sbrs	r25, 4
 14a:	0f c0       	rjmp	.+30     	; 0x16a <__vector_18+0x48>
		UCSR0A &=~(1<<FE0);				// setzt FrameError zu 0
 14c:	80 91 c0 00 	lds	r24, 0x00C0
 150:	8f 7e       	andi	r24, 0xEF	; 239
 152:	80 93 c0 00 	sts	0x00C0, r24
		DmxCount = 1;					// 
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	90 93 03 01 	sts	0x0103, r25
 15e:	80 93 02 01 	sts	0x0102, r24
		gDmxState = 1;					// DMX-Status -> BREAK
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	80 93 0a 01 	sts	0x010A, r24
		return;
 168:	7f c0       	rjmp	.+254    	; 0x268 <__vector_18+0x146>
	}

	
	else if(DmxState==1){				// wenn DMX-Status = BREAK
 16a:	81 30       	cpi	r24, 0x01	; 1
 16c:	21 f4       	brne	.+8      	; 0x176 <__vector_18+0x54>
		if (DmxByte==0) gDmxState = 2;	// DMX-Status -> STARTBYTE		
 16e:	41 11       	cpse	r20, r1
 170:	78 c0       	rjmp	.+240    	; 0x262 <__vector_18+0x140>
 172:	82 e0       	ldi	r24, 0x02	; 2
 174:	23 c0       	rjmp	.+70     	; 0x1bc <__vector_18+0x9a>
		else gDmxState = 0;				// IDLE
	}


	else if(DmxState==2){											// wenn DMX-Status = STARTBYTE	
 176:	82 30       	cpi	r24, 0x02	; 2
 178:	21 f5       	brne	.+72     	; 0x1c2 <__vector_18+0xa0>
		if(--DmxCount == 0){
 17a:	80 91 02 01 	lds	r24, 0x0102
 17e:	90 91 03 01 	lds	r25, 0x0103
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	90 93 03 01 	sts	0x0103, r25
 188:	80 93 02 01 	sts	0x0102, r24
 18c:	89 2b       	or	r24, r25
 18e:	09 f0       	breq	.+2      	; 0x192 <__vector_18+0x70>
 190:	6a c0       	rjmp	.+212    	; 0x266 <__vector_18+0x144>
			DmxCount = 1;
 192:	21 e0       	ldi	r18, 0x01	; 1
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	30 93 03 01 	sts	0x0103, r19
 19a:	20 93 02 01 	sts	0x0102, r18
			if(DmxCount==kanal_servo1)pan = DmxByte*7+500;		// zuweisung des Wertes zum ersten Aktor, wenn Startadresse = 1
 19e:	80 91 0c 01 	lds	r24, 0x010C
 1a2:	81 30       	cpi	r24, 0x01	; 1
 1a4:	51 f4       	brne	.+20     	; 0x1ba <__vector_18+0x98>
 1a6:	27 e0       	ldi	r18, 0x07	; 7
 1a8:	42 9f       	mul	r20, r18
 1aa:	c0 01       	movw	r24, r0
 1ac:	11 24       	eor	r1, r1
 1ae:	8c 50       	subi	r24, 0x0C	; 12
 1b0:	9e 4f       	sbci	r25, 0xFE	; 254
 1b2:	90 93 05 01 	sts	0x0105, r25
 1b6:	80 93 04 01 	sts	0x0104, r24
			gDmxState = 3;											// DMX-Status -> STARTADRESSE
 1ba:	83 e0       	ldi	r24, 0x03	; 3
 1bc:	80 93 0a 01 	sts	0x010A, r24
 1c0:	52 c0       	rjmp	.+164    	; 0x266 <__vector_18+0x144>
		}
	}

	else if(DmxState==3){
 1c2:	83 30       	cpi	r24, 0x03	; 3
 1c4:	09 f0       	breq	.+2      	; 0x1c8 <__vector_18+0xa6>
 1c6:	4f c0       	rjmp	.+158    	; 0x266 <__vector_18+0x144>
		DmxCount++;
 1c8:	80 91 02 01 	lds	r24, 0x0102
 1cc:	90 91 03 01 	lds	r25, 0x0103
 1d0:	01 96       	adiw	r24, 0x01	; 1
 1d2:	90 93 03 01 	sts	0x0103, r25
 1d6:	80 93 02 01 	sts	0x0102, r24
		if(DmxCount==kanal_servo1)pan = DmxByte*7+500;			// zuweisung zum 1. Aktor
 1da:	20 91 0c 01 	lds	r18, 0x010C
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	82 17       	cp	r24, r18
 1e2:	93 07       	cpc	r25, r19
 1e4:	51 f4       	brne	.+20     	; 0x1fa <__vector_18+0xd8>
 1e6:	57 e0       	ldi	r21, 0x07	; 7
 1e8:	45 9f       	mul	r20, r21
 1ea:	90 01       	movw	r18, r0
 1ec:	11 24       	eor	r1, r1
 1ee:	2c 50       	subi	r18, 0x0C	; 12
 1f0:	3e 4f       	sbci	r19, 0xFE	; 254
 1f2:	30 93 05 01 	sts	0x0105, r19
 1f6:	20 93 04 01 	sts	0x0104, r18
		if(DmxCount==kanal_servo2)tilt = DmxByte*7+500;			// zuweisung zum 2. Aktor
 1fa:	20 91 07 01 	lds	r18, 0x0107
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	82 17       	cp	r24, r18
 202:	93 07       	cpc	r25, r19
 204:	51 f4       	brne	.+20     	; 0x21a <__vector_18+0xf8>
 206:	57 e0       	ldi	r21, 0x07	; 7
 208:	45 9f       	mul	r20, r21
 20a:	90 01       	movw	r18, r0
 20c:	11 24       	eor	r1, r1
 20e:	2c 50       	subi	r18, 0x0C	; 12
 210:	3e 4f       	sbci	r19, 0xFE	; 254
 212:	30 93 09 01 	sts	0x0109, r19
 216:	20 93 08 01 	sts	0x0108, r18
		if(DmxCount==kanal_red)OCR0A = DmxByte;						// zuweisung zum 3. Aktor
 21a:	20 91 06 01 	lds	r18, 0x0106
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	82 17       	cp	r24, r18
 222:	93 07       	cpc	r25, r19
 224:	09 f4       	brne	.+2      	; 0x228 <__vector_18+0x106>
 226:	47 bd       	out	0x27, r20	; 39
		if(DmxCount==kanal_green)OCR0B = DmxByte;					// zuweisung zum 4. Aktor
 228:	20 91 0d 01 	lds	r18, 0x010D
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	80 91 02 01 	lds	r24, 0x0102
 232:	90 91 03 01 	lds	r25, 0x0103
 236:	82 17       	cp	r24, r18
 238:	93 07       	cpc	r25, r19
 23a:	09 f4       	brne	.+2      	; 0x23e <__vector_18+0x11c>
 23c:	48 bd       	out	0x28, r20	; 40
		if(DmxCount==kanal_blue)OCR2B = DmxByte;					// zuweisung zum 5. Aktor
 23e:	50 91 0e 01 	lds	r21, 0x010E
 242:	25 2f       	mov	r18, r21
 244:	30 e0       	ldi	r19, 0x00	; 0
 246:	82 17       	cp	r24, r18
 248:	93 07       	cpc	r25, r19
 24a:	11 f4       	brne	.+4      	; 0x250 <__vector_18+0x12e>
 24c:	40 93 b4 00 	sts	0x00B4, r20
		if(DmxCount>= kanal_blue) gDmxState = 0;						// DMX-Status -> IDLE
 250:	85 2f       	mov	r24, r21
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	20 91 02 01 	lds	r18, 0x0102
 258:	30 91 03 01 	lds	r19, 0x0103
 25c:	28 17       	cp	r18, r24
 25e:	39 07       	cpc	r19, r25
 260:	10 f0       	brcs	.+4      	; 0x266 <__vector_18+0x144>
 262:	10 92 0a 01 	sts	0x010A, r1
	}

	sei();								// einschalten der Interrupts
 266:	78 94       	sei
	return;
}
 268:	9f 91       	pop	r25
 26a:	8f 91       	pop	r24
 26c:	5f 91       	pop	r21
 26e:	4f 91       	pop	r20
 270:	3f 91       	pop	r19
 272:	2f 91       	pop	r18
 274:	0f 90       	pop	r0
 276:	0f be       	out	0x3f, r0	; 63
 278:	0f 90       	pop	r0
 27a:	1f 90       	pop	r1
 27c:	18 95       	reti

0000027e <main>:


int main(void){

	datadirec_init();					// Initialisierung der I/O ports
 27e:	eb de       	rcall	.-554    	; 0x56 <datadirec_init>
	timer_init();						// Timer-Initialisierung
 280:	f7 de       	rcall	.-530    	; 0x70 <timer_init>
	servo_init();						// Timer-Initialisierung für Servos
 282:	07 df       	rcall	.-498    	; 0x92 <servo_init>
	UART_init();						// UART-Initialisierung
 284:	17 df       	rcall	.-466    	; 0xb4 <UART_init>
	anfangszustand();					// festlegen des Anfangszustandes
 286:	22 df       	rcall	.-444    	; 0xcc <anfangszustand>
	gDmxState = 0;						// DMX-Status -> IDLE
 288:	10 92 0a 01 	sts	0x010A, r1
	sei();								// einschalten der Interrupts
 28c:	78 94       	sei

	uint16_t counter = 0;
 28e:	c0 e0       	ldi	r28, 0x00	; 0
 290:	d0 e0       	ldi	r29, 0x00	; 0

	while(1){

		add = get_address();
 292:	2b df       	rcall	.-426    	; 0xea <get_address>
 294:	80 93 0b 01 	sts	0x010B, r24
	
		PORTB |= (1<<PB0);
 298:	28 9a       	sbi	0x05, 0	; 5
		if(counter >=	300)
 29a:	cc 32       	cpi	r28, 0x2C	; 44
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	d8 07       	cpc	r29, r24
 2a0:	08 f4       	brcc	.+2      	; 0x2a4 <main+0x26>
 2a2:	4a c0       	rjmp	.+148    	; 0x338 <main+0xba>
		{
			if(OCR1A < pan)OCR1A++;
 2a4:	80 91 88 00 	lds	r24, 0x0088
 2a8:	90 91 89 00 	lds	r25, 0x0089
 2ac:	20 91 04 01 	lds	r18, 0x0104
 2b0:	30 91 05 01 	lds	r19, 0x0105
 2b4:	82 17       	cp	r24, r18
 2b6:	93 07       	cpc	r25, r19
 2b8:	48 f4       	brcc	.+18     	; 0x2cc <main+0x4e>
 2ba:	80 91 88 00 	lds	r24, 0x0088
 2be:	90 91 89 00 	lds	r25, 0x0089
 2c2:	01 96       	adiw	r24, 0x01	; 1
 2c4:	90 93 89 00 	sts	0x0089, r25
 2c8:	80 93 88 00 	sts	0x0088, r24
			if(OCR1A > pan)OCR1A--;
 2cc:	80 91 88 00 	lds	r24, 0x0088
 2d0:	90 91 89 00 	lds	r25, 0x0089
 2d4:	28 17       	cp	r18, r24
 2d6:	39 07       	cpc	r19, r25
 2d8:	48 f4       	brcc	.+18     	; 0x2ec <main+0x6e>
 2da:	80 91 88 00 	lds	r24, 0x0088
 2de:	90 91 89 00 	lds	r25, 0x0089
 2e2:	01 97       	sbiw	r24, 0x01	; 1
 2e4:	90 93 89 00 	sts	0x0089, r25
 2e8:	80 93 88 00 	sts	0x0088, r24
			if(OCR1B < tilt)OCR1B++;
 2ec:	80 91 8a 00 	lds	r24, 0x008A
 2f0:	90 91 8b 00 	lds	r25, 0x008B
 2f4:	20 91 08 01 	lds	r18, 0x0108
 2f8:	30 91 09 01 	lds	r19, 0x0109
 2fc:	82 17       	cp	r24, r18
 2fe:	93 07       	cpc	r25, r19
 300:	48 f4       	brcc	.+18     	; 0x314 <main+0x96>
 302:	80 91 8a 00 	lds	r24, 0x008A
 306:	90 91 8b 00 	lds	r25, 0x008B
 30a:	01 96       	adiw	r24, 0x01	; 1
 30c:	90 93 8b 00 	sts	0x008B, r25
 310:	80 93 8a 00 	sts	0x008A, r24
			if(OCR1B > tilt)OCR1B--;
 314:	80 91 8a 00 	lds	r24, 0x008A
 318:	90 91 8b 00 	lds	r25, 0x008B
 31c:	28 17       	cp	r18, r24
 31e:	39 07       	cpc	r19, r25
 320:	48 f4       	brcc	.+18     	; 0x334 <main+0xb6>
 322:	80 91 8a 00 	lds	r24, 0x008A
 326:	90 91 8b 00 	lds	r25, 0x008B
 32a:	01 97       	sbiw	r24, 0x01	; 1
 32c:	90 93 8b 00 	sts	0x008B, r25
 330:	80 93 8a 00 	sts	0x008A, r24
			//PORTB ^= (1<<PB0);
			counter= 0;
 334:	c0 e0       	ldi	r28, 0x00	; 0
 336:	d0 e0       	ldi	r29, 0x00	; 0
		
	
		


		counter++;
 338:	21 96       	adiw	r28, 0x01	; 1

		

	}
 33a:	ab cf       	rjmp	.-170    	; 0x292 <main+0x14>

0000033c <_exit>:
 33c:	f8 94       	cli

0000033e <__stop_program>:
 33e:	ff cf       	rjmp	.-2      	; 0x33e <__stop_program>
